===============
Back MPTT based: 

===============
LAYOUT:
1. Nested layout: MPTT UI in admin
2. Not nested list in vue.js front: oldest op top

######### MODEL #######################
Default qs in Model: 
qs order_insertion_by =  created_at (old on top)

############# URL #####################
url: need idea slug

################# Views ###############
view: ListAPIView         
sorted = created_at
qs = Comment.objects.filter(idea=idea).select_related('idea')

# what happens with deleted comment 
if comment gets deleted |=> body="" && deleted=True (record of deleted comment in db = "deleted_content")
Empty string == "" will be a placeholder for deleted comment

view: CreateModelMixin,UpdateModelMixin,DestroyModelMixin,RetrieveModelMixin,viewsets.GenericViewSet
author of comm or staff

serializer (no nesting)
('id','created_at','body','idea_id','user_id','reply_to_id','parent','author_comment','deleted'

===============
Front: 
===============
1. Rendering:
Render comments in Instagram-style outline ( 1 indentation to the right = :depth=1)
root comments (parent = null): rendered on the left side
children      (parent != null) => rendered with 1 indentaion 
if comment gets deleted |=> no render comment on front but placeholder == "" to preserve a chain 
2. Components: Comments Comment CommentForm

2.Components (Comments.vue,Comment.vue,CommentForm.vue)
-----------------
General notes:
-----------------
      a.essential feature: 
      attr == activeComment helps keeping track of currect active comment 
      so all actions will happen only in a target comment
      b. Comments.vue is a main parent: 
            import CommentForm.vue(for edit-delete)
            import Commet.vue (child)
            import CommentForm.vue(for edit-delete)
=====================================================
Details:
=====================================================
# what happens in Comments.vue?
Re:
  user can create root comment (via CommentForm)
  user can edit/delete root comment 
  display root comments (via Comment.vue) 
  if root comment has children => loop for children
1.1 computed: method getRootComms fetches comments from vuex state and filter root comments
1.2 root comments go through a loop over getRootComms objects (via Comment.vue)
1.3 activeComment = key point
data()
	{
	return {
		activeComponent: null/or smth dif
		cleanForm:false // serves form create root comment (req Ok|=> form clear)
	}
}

<app-comment 
                v-for="comment in getRootComms"
                :key="comment.id"
                :comment="comment"
                :parent-id="comment.id"
                :active-comment="activeComment"                
                :comments="comments"
                :depth=1
                @replyComment="replyComment"
                @updateComment="updateComment"
                @commEdit="handleEdit"
                @commReply="handleReply"
                @commDelete="handleDelete"
                @handleCancel="handleCancel">                
</app-comment> 

methods:
	handleEdit
	handleReply
	handleDelete
	handleCancel
are listening to child components (via Comment to CommentForm)
q: what is the user doing?
re: keeps track what user is doing and adjust attr activeComponent accordinaly via Comment.vue => 
for example: this will determine what will be displayed on a submit button in form

=================
Comment
==================
# what happens in Comment.vue? 
1.rendering of a given comment
2.if comment not deleted:
3 options
editing       |=> import CommentForm with submitTitle=Edit
not editing   |=> display comment body
replying      |=> import CommentForm with submitTitile=Reply
3.if comment deleted |=> will be rendered as "Comment deleted"
4. if comment has children(reply's) => render them  recursively

----------------------------------------------
if comment has replies && replies.length > 0
----------------------------------------------
start recursive rendering reply's old on top: array (...comments.filter(comm=> comm.aprent==this.parentId).sort(a,b)=>
			new Date(a.created_at).getTime() - new Date(b.created_at).getTime())
note: getTime() built-in js he number of milliseconds* since the Unix Epoch

computed:{
	indent() transform translate(depth*50)
note: trick with depth 
      parent Comments.vue   depth =1
      child Comment.vue     depth = 0
      result: one indent 
=================
CommentForm
=================
give possibilty tos: Edit Reply addRootComm
track user activity and emits event to parent comp(Comment/Comments)
new root comment: body + parent = null
edit  comment: body
reply: body + parentId



  




